/***************************************************************************
 *  @file       BucketSort.cpp
 *  @author     jz
 *  @date       05 Mar. 2016
 *  @remark     数据结构 c语言版 严蔚敏 第十章
 *  @note	桶排序
 ***************************************************************************/
//实现用
#include<stdlib.h>
#include<stdio.h>
//#include<math.h>
//#include<limits.h>
//#include<string.h>
//测试用

#include "DataStructure.h" //本书需要的一些定义

#define MAXSIZE 20 //顺序表的最大长度
typedef int KeyType; //关键字类型说明
typedef int InfoType; //其它数据项类型说明
struct RedType //记录类型定义
{
	KeyType key; //关键字域
	InfoType data; //其它数据项
};
struct SqList
{
	RedType r[MAXSIZE+1]; //r[0]闲置或用作哨兵单元
	int length; //顺序表长度
};

//对两个关键字的比较约定 数值型关键字
#define EQ(a,b) ((a)==(b))
#define LT(a,b) ((a)<(b))
#define LQ(a,b) ((a)<=(b))

void PrintSL(SqList *L)
//输出顺序表
{
	int i;
	printf("Put: ");
	for(i=1;i<=L->length;++i)
		printf("%d ",L->r[i]);
	putchar('\n');
}//PrintSL

void CreateSL(SqList *L)
//构造顺序表
{
	int i;
	int a[10]={5,8,6,7,16,3,17,9,15,4};
	L->length=10;
	for(i=1;i<=L->length;++i)
		L->r[i].key=a[i-1];
}//CreateSL

void BucketSort(SqList &L)
//对顺序表L做桶排序
//key范围默认为0....MAXSIZE
{
	RedType R[MAXSIZE];
	int count[MAXSIZE];
	int i;
	for(i=0;i<MAXSIZE;++i)
		count[i]=0; //初始化计数器
	for(i=1;i<=L.length;++i)
	{
		count[L.r[i].key]++; //计数
		R[i]=L.r[i]; //原数组复制到R中
	}
	for(i=1;i<MAXSIZE;++i)
		count[i]=count[i]+count[i-1];
	for(i=1;i<MAXSIZE;++i)
		printf("%d ",count[i]);
	putchar('\n');
	
	for(i=1;i<=L.length;++i)
		L.r[count[R[i].key]--]=R[i]; 
	//若数组从0开始就前置--，从一开始就后置--
}//BucketSort

//main函数做测试用
int main()
{
	SqList l;
	CreateSL(&l);
	PrintSL(&l);
	BucketSort(l);
	PrintSL(&l);
	return 0;
}
